from flask import Flask, request, jsonify
import os
from dotenv import load_dotenv

app = Flask(__name__)
load_dotenv()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
def process_query(query):
    query = query.lower()
    
    # –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    rto_rules = ""
    if os.path.exists("knowledge/3_rezhim_truda_otdykha.txt"):
        with open("knowledge/3_rezhim_truda_otdykha.txt", "r", encoding="utf-8") as f:
            rto_rules = f.read()

    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    if "—Ä–∞—Å—Å—á–∏—Ç–∞–π" in query or "—Ä–∞—Å—á—ë—Ç" in query or "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ" in query:
        return calculate_route(query)

    elif "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç–¥—ã—Ö" in query:
        return "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–∏–Ω–∏–º—É–º 11 —á–∞—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç—å–µ 8(2)."

    elif "—Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö" in query:
        return "–°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ 9 —á–∞—Å–æ–≤, –Ω–æ –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö —Ä–∞–∑ –º–µ–∂–¥—É –¥–≤—É–º—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –æ—Ç–¥—ã—Ö–∞–º–∏."

    elif "–ø–µ—Ä–µ—Ä—ã–≤" in query:
        return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî 45 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 4,5 —á–∞—Å–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è. –ú–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏: 15 –º–∏–Ω + 30 –º–∏–Ω."

    elif "–ø—Ä–æ–¥–ª–µ–Ω–∏–µ" in query or "—Å—Ç–∞—Ç—å—è 12" in query:
        return "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–æ–∂–¥–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ 2 —á–∞—Å–∞, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–∞—Ä–∫–æ–≤–∫–∏, –ø—Ä–æ–±–∫–∏ –∏–ª–∏ –ø–æ–≥–æ–¥–∞. –ù—É–∂–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥—ã—Ö."

    elif "–ø–∞—Ä–æ–º" in query or "–ø–æ–µ–∑–¥" in query:
        return "–ï—Å–ª–∏ –æ—Ç–¥—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –ø–∞—Ä–æ–º–∞ –∏–ª–∏ –ø–æ–µ–∑–¥–∞, –æ–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–¥—ã—Ö–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 2 —á–∞—Å–∞."

    elif "–∫–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫" in query or "–∫–æ–≥–¥–∞ –ø—Ä–∏–µ–¥—É" in query:
        return "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –º–∞—Ä—à—Ä—É—Ç. –°–∫–æ–ª—å–∫–æ –∫–º –¥–æ –≤—ã–≥—Ä—É–∑–∫–∏?"

    else:
        return "–ù–µ –Ω–∞—à—ë–ª –≤ –±—É–º–∞–≥–∞—Ö ‚Äî –Ω–µ –±—É–¥—É –≤—Ä–∞—Ç—å."

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
def calculate_route(query):
    try:
        distance = int(query.split("–∫–º")[0].split(" ") [-1])
        speed = int(query.split("—Å–∫–æ—Ä–æ—Å—Ç—å")[1].split(" ")[1])
        is_team = "–æ–¥–∏–Ω–æ—á–∫–∞" not in query and "–æ–¥–∏–Ω" not in query
        avoid_night_driving = "–Ω–æ—á—å—é" in query or "–∏–∑–±–µ–≥–∞—Ç—å –Ω–æ—á–Ω–æ–≥–æ" in query
        start_time = query.split("—Å—Ç–∞—Ä—Ç")[1].strip().split()[0] if "—Å—Ç–∞—Ä—Ç" in query else "07:00"
        date = query.split(",")[0].strip() if "," in query else "03.06.2025"

        hour_drive = 4
        rest_hours = 11
        max_daily_driving = 9
        max_weekly_driving = 56

        drive_per_hour = speed * hour_drive
        total_hours = distance / speed
        full_days = int(total_hours // 8)
        remaining_distance = distance - (full_days * 600)

        result = f"üì¶ –ó–ê–î–ê–ß–ê:\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –∫–º\nüöõ –°–∫–æ—Ä–æ—Å—Ç—å: {speed} –∫–º/—á\nüë§ –≠–∫–∏–ø–∞–∂: {'–ø–∞—Ä–Ω—ã–π' if is_team else '–æ–¥–∏–Ω–æ—á–∫–∞'}\nüïí –°—Ç–∞—Ä—Ç: {date}, {start_time}\nüßò –†–µ–∂–∏–º: –∫–æ–º—Ñ–æ—Ä—Ç\nüåô –ò–∑–±–µ–≥–∞—Ç—å –Ω–æ—á–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è: {'–¥–∞' if avoid_night_driving else '–Ω–µ—Ç'}\n\n---\n"

        for i in range(full_days):
            result += f"üïó –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {start_time}\nüöõ –í–æ–∂–¥–µ–Ω–∏–µ {hour_drive} —á ‚âà {drive_per_hour} –∫–º ‚Üí –î–æ {add_time(start_time, hour_drive)}\nüçΩÔ∏è –ü–∞—É–∑–∞ + –µ–¥–∞: 1 —á ‚Üí –î–æ {add_time(start_time, hour_drive + 1)}\nüõå –û—Ç–¥—ã—Ö (11 —á): –î–æ {add_time(start_time, hour_drive + rest_hours)}\n\n"

        if remaining_distance > 0:
            result += f"üïó –ù–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã: {add_time(start_time, hour_drive + rest_hours)}\nüöõ –û—Å—Ç–∞—Ç–æ–∫ –ø—É—Ç–∏: {remaining_distance} –∫–º ‚âà {round(remaining_distance / speed, 1)} —á ‚Üí –î–æ {add_time(add_time(start_time, hour_drive + rest_hours), round(remaining_distance / speed, 1))}\nüèÅ –ü—Ä–∏–±—ã—Ç–∏–µ: ~{add_time(add_time(start_time, hour_drive + rest_hours), round(remaining_distance / speed, 1))} —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è\nüìè –û–±—â–∏–π –ø—É—Ç—å: {distance} –∫–º"

        return result
    except Exception as e:
        return "‚ö†Ô∏è –ù–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç. –£—Ç–æ—á–Ω–∏ –¥–∞–Ω–Ω—ã–µ."

# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def add_time(current_time, hours):
    from datetime import datetime, timedelta
    time_obj = datetime.strptime(current_time, "%H:%M")
    new_time = time_obj + timedelta(hours=hours)
    return new_time.strftime("%H:%M")

@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_query = data.get("query", "")

    if not user_query:
        return jsonify({"error": "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"}), 400

    try:
        max_response = process_query(user_query)
        return jsonify({"response": max_response})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
