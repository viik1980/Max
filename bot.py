import logging
import os
import openai
import tempfile
import requests
import urllib.parse
import asyncio
from geopy.distance import geodesic
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
MAX_TURNS_FOR_SUMMARY = 10  # –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏
MAX_DISTANCE_KM = 50        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ –∫–º)
REQUEST_TIMEOUT = 30        # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è GPT –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open("prompt.txt", "r", encoding="utf-8") as f:
        SYSTEM_PROMPT = f.read()
except FileNotFoundError:
    SYSTEM_PROMPT = "–¢—ã ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –ø–æ–º–æ—â–Ω–∏–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∂–∏–∑–Ω–∏ –≤ —Ä–µ–π—Å–µ."
    logger.warning("–§–∞–π–ª prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è GPT –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open("prompt.txt", "r", encoding="utf-8") as f:
        SYSTEM_PROMPT = f.read()
except FileNotFoundError:
    SYSTEM_PROMPT = "–¢—ã ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –ø–æ–º–æ—â–Ω–∏–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∂–∏–∑–Ω–∏ –≤ —Ä–µ–π—Å–µ."

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def load_relevant_knowledge(user_input: str) -> str:
    keywords_map = {
        "–æ—Ç–¥—ã—Ö": "Rezim_RTO.md",
        "–ø–∞—É–∑": "Rezim_RTO.md",
        "—Å–º–µ–Ω": "Rezim_RTO.md",
        "—Ç–∞—Ö–æ–≥—Ä–∞—Ñ": "4_tahograf_i_karty.md",
        "–∫–∞—Ä—Ç–∞": "4_tahograf_i_karty.md",
        "–ø–æ–µ–∑–¥": "ferry_routes.md",
        "–ø–∞—Ä–æ–º": "ferry_routes.md",
        "—Ü–º—Ä": "CMR.md",
        "–¥–æ–∫—É–º–µ–Ω—Ç": "CMR.md",
        "–∫–æ–º—Ñ–æ—Ä—Ç": "11_komfort_i_byt.md",
        "–ø–∏—Ç–∞–Ω–∏–µ": "12_pitanie_i_energiya.md"
    }

    selected_files = set()
    lowered = user_input.lower()
    for keyword, filename in keywords_map.items():
        if keyword in lowered:
            selected_files.add(filename)

    texts = []
    for filename in sorted(selected_files):
        path = os.path.join("knowledge", filename)
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    texts.append(f"üìò {filename}:{content}\n")

    return "\n".join(texts) or ""

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
def format_places_reply(places_grouped: dict, source_name: str, ratings=None) -> tuple[list[str], list[list[list[InlineKeyboardButton]]]]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ –≤–∏–¥–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)."""
    if not places_grouped:
        logger.debug(f"Places grouped is empty for {source_name}")
        return [f"üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ ({source_name})."], []

    messages = []
    button_groups = []
    buttons_per_message = 5  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 5 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_message = f"üìç –ú–µ—Å—Ç–∞ —Ä—è–¥–æ–º ({source_name}):"

    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_icons = {
        "üå≥ –ü–∞—Ä–∫–∏": "üå≥",
        "üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "üèõ",
        "üöõ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Ñ—É—Ä": "üöõ",
        "üè® –û—Ç–µ–ª—å/–ú–æ—Ç–µ–ª—å": "üè®",
        "üõí –ú–∞–≥–∞–∑–∏–Ω": "üõí",
        "üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è": "üß∫",
        "üöø –î—É—à–µ–≤—ã–µ": "üöø"
    }

    all_buttons = []
    for label, places in places_grouped.items():
        places.sort(key=lambda x: x[3])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        places = places[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–µ—Å—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = label.split()[1] if len(label.split()) > 1 else label  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        icon = category_icons.get(label, "üìç")  # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if ratings:
            for name, address, url, distance_km, rating in places:
                button_text = f"{icon} {category} {name} ({distance_km:.1f} –∫–º)"
                if rating and 0 <= rating <= 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞–ª–∏–¥–µ–Ω
                    button_text += f" ‚òÖ{rating:.1f}"
                all_buttons.append([InlineKeyboardButton(text=button_text, url=url)])
        else:
            for name, address, url, distance_km in places:
                button_text = f"{icon} {category} {name} ({distance_km:.1f} –∫–º)"
                all_buttons.append([InlineKeyboardButton(text=button_text, url=url)])

    logger.debug(f"Total buttons created: {len(all_buttons)} for {source_name}")

    if not all_buttons:
        return [f"üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ ({source_name})."], []

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 5
    for i in range(0, len(all_buttons), buttons_per_message):
        button_group = all_buttons[i:i + buttons_per_message]
        button_groups.append(button_group)
        messages.append(current_message)

    logger.debug(f"Messages: {len(messages)}, Button groups: {len(button_groups)} for {source_name}")
    return messages, button_groups
# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å GPT ---
async def summarize_history(history: list) -> str:
    """
    [TOKEN OPTIMIZATION] –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–∏–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –∏ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å.
    """
    if not history:
        return ""
    
    dialogue = "\n".join([f"{msg['role']}: {msg['content']}" for msg in history])
    prompt = (
        "–°–æ–∑–¥–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫—É—é –∏ —Å–∂–∞—Ç—É—é —Å–≤–æ–¥–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞. "
        "–°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏, –Ω–æ —É–±–µ—Ä–∏ –≤—Å–µ –ª–∏—à–Ω–µ–µ. "
        "–°–≤–æ–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–º–æ—á—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n\n"
        f"–î–∏–∞–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{dialogue}"
    )
    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.0,
            max_tokens=250
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        return ""

async def ask_gpt(messages: list) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ GPT, –∏—Å–ø–æ–ª—å–∑—É—è gpt-3.5-turbo.
    """
    try:
        response = await client.chat.completions.create(model="gpt-3.5-turbo", messages=messages)
        return response.choices[0].message.content.strip()
    except openai.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI API (gpt-3.5-turbo): {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
        return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def process_user_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    if 'history' not in context.user_data:
        context.user_data['history'] = []

    context.user_data['history'].append({"role": "user", "content": user_input})
    
    history_summary = await summarize_history(context.user_data['history'][:-1])

    full_system_prompt = SYSTEM_PROMPT
    kb_snippet = load_relevant_knowledge(user_input)
    if kb_snippet:
        full_system_prompt += "\n\nüìö –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\n" + kb_snippet

    messages = [{"role": "system", "content": full_system_prompt}]
    if history_summary:
        messages.append({"role": "system", "content": f"–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n{history_summary}"})
    
    messages.append({"role": "user", "content": user_input})

    assistant_reply = await ask_gpt(messages)

    if assistant_reply:
        context.user_data['history'].append({"role": "assistant", "content": assistant_reply})
        context.user_data['history'] = context.user_data['history'][-MAX_TURNS_FOR_SUMMARY:]
        await update.message.reply_text(assistant_reply)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    context.user_data.clear()
    await update.message.reply_text("–ó–¥–æ—Ä–æ–≤–∞, —è ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –¥—Ä—É–≥ –∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫. –ü–∏—à–∏, –≥–æ–≤–æ—Ä–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_input = update.message.text.strip()
    if not user_input:
        return

    await process_user_request(update, context, user_input)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    audio_path = None
    try:
        file = await update.message.voice.get_file()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as f:
            await file.download_to_drive(f.name)
            audio_path = f.name

        with open(audio_path, "rb") as audio_file:
            transcript = await client.audio.transcriptions.create(model="whisper-1", file=audio_file)
            user_text = transcript.text.strip()
        
        if not user_text:
            await update.message.reply_text("üéß –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: \"{user_text}\"")
        await process_user_request(update, context, user_text)

    except openai.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
    finally:
        if audio_path and os.path.exists(audio_path):
            os.remove(audio_path)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ---
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–∏—Å–∫–∞."""
    try:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        context.user_data['last_location'] = (lat, lon)
        await update.message.reply_text(
            "üìç –ü–æ–ª—É—á–∏–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("Google Maps", callback_data=f"search_google|{lat}|{lon}")],
                [InlineKeyboardButton("OpenStreetMap", callback_data=f"search_overpass|{lat}|{lon}")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    try:
        action, lat_str, lon_str = query.data.split("|")
        lat, lon = float(lat_str), float(lon_str)
        source_name = "Google Maps" if action == 'search_google' else "OpenStreetMap"
        await query.edit_message_text(text=f"–ò—â—É —á–µ—Ä–µ–∑ {source_name}...")

        if action == "search_google":
            await search_with_google(query, context, lat, lon)
        elif action == "search_overpass":
            await search_with_overpass(query, context, lat, lon)
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data: {query.data}, {e}")
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google API ---
async def search_with_google(query, context: ContextTypes.DEFAULT_TYPE, lat: float, lon: float):
    """–ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ Google Places API —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        place_queries = [
            {"label": "üå≥ –ü–∞—Ä–∫–∏", "type": "park", "keyword": "park", "radius": 20000},
            {"label": "üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "type": "tourist_attraction", "keyword": "tourist attraction|museum|landmark", "radius": 20000},
            {"label": "üöõ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Ñ—É—Ä", "keyword": "–≥—Ä—É–∑–æ–≤–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞|truck parking", "radius": 10000},
            {"label": "üè® –û—Ç–µ–ª—å/–ú–æ—Ç–µ–ª—å", "type": "lodging", "keyword": "–º–æ—Ç–µ–ª—å|–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞|hotel|motel", "radius": 10000},
            {"label": "üõí –ú–∞–≥–∞–∑–∏–Ω", "type": "supermarket", "radius": 5000},
            {"label": "üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è", "keyword": "–ø—Ä–∞—á–µ—á–Ω–∞—è —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è|self-service laundry", "radius": 5000},
            {"label": "üöø –î—É—à–µ–≤—ã–µ", "keyword": "–¥—É—à|—Å–∞—É–Ω–∞|truck stop showers", "radius": 10000},
        ]
        found_results_grouped = {}
        base_url = "https://maps.googleapis.com/maps/api/place/"
        user_location = (lat, lon)

        for query_info in place_queries:
            label = query_info["label"]
            place_type = query_info.get("type")
            keyword = query_info.get("keyword")
            radius = query_info.get("radius", 10000)
            next_page_token = None

            urls = []
            if place_type:
                urls.append(
                    f"{base_url}nearbysearch/json"
                    f"?location={lat},{lon}&type={place_type}&rankby=distance&key={GOOGLE_MAPS_API_KEY}"
                )
            if keyword:
                query_str = urllib.parse.quote(keyword)
                urls.append(
                    f"{base_url}textsearch/json"
                    f"?query={query_str}&location={lat},{lon}&radius={radius}&key={GOOGLE_MAPS_API_KEY}&language=ru"
                )

            for url in urls:
                while True:
                    try:
                        request_url = f"{url}&pagetoken={next_page_token}" if next_page_token else url
                        logger.info(f"Google API –∑–∞–ø—Ä–æ—Å –¥–ª—è {label}: {request_url}")
                        res = requests.get(request_url, timeout=REQUEST_TIMEOUT)
                        res.raise_for_status()
                        data = res.json()
                        logger.info(f"–°—Ç–∞—Ç—É—Å Google API –¥–ª—è {label}: {data.get('status')}")
                        logger.debug(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç Google API –¥–ª—è {label}: {data}")

                        if data.get("status") in ["OVER_QUERY_LIMIT", "ZERO_RESULTS", "REQUEST_DENIED"]:
                            logger.warning(f"Google API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {data.get('status')} –¥–ª—è {label}: {data.get('error_message', '')}")
                            break

                        if data.get("results"):
                            if label not in found_results_grouped:
                                found_results_grouped[label] = []
                            for place in data["results"][:15]:
                                name = place.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                                address = place.get("vicinity", "–ë–µ–∑ –∞–¥—Ä–µ—Å–∞")
                                loc = place["geometry"]["location"]
                                place_location = (loc["lat"], loc["lng"])
                                distance_km = geodesic(user_location, place_location).kilometers
                                rating = place.get("rating")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None

                                if distance_km <= MAX_DISTANCE_KM:
                                    maps_url = f"https://www.google.com/maps/dir/?api=1&origin={lat},{lon}&destination={loc['lat']},{loc['lng']}&travelmode=driving"
                                    unique_key = (name, address)
                                    if unique_key not in [(item[0], item[1]) for item in found_results_grouped[label]]:
                                        found_results_grouped[label].append((name, address, maps_url, distance_km, rating if rating else None))

                        next_page_token = data.get("next_page_token")
                        if not next_page_token:
                            break
                        await asyncio.sleep(2)

                    except requests.exceptions.RequestException as e:
                        logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ Google API –¥–ª—è {label}: {e}")
                        break
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Google API –¥–ª—è {label}: {e}")
                        break

        messages, button_groups = format_places_reply(found_results_grouped, "Google Maps")
        if not button_groups:
            await query.message.reply_markdown(messages[0])
        else:
            for msg, buttons in zip(messages, button_groups):
                await query.message.reply_markdown(msg, reply_markup=InlineKeyboardMarkup(buttons))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Google API: {e}", exc_info=True)
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Google Maps. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.")

# --- –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Overpass API ---
async def search_with_overpass(query, context: ContextTypes.DEFAULT_TYPE, lat: float, lon: float):
    """–ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ Overpass API (OpenStreetMap)."""
    try:
        place_queries = [
            {"label": "üå≥ –ü–∞—Ä–∫–∏", "query": f'node["leisure"="park"](around:20000,{lat},{lon});'},
            {"label": "üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "query": f'node["tourism"~"attraction|museum|monument"](around:20000,{lat},{lon});'},
            {"label": "üöõ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Ñ—É—Ä", "query": f'node["highway"="services"]["access"="truck"](around:20000,{lat},{lon});'},
            {"label": "üè® –û—Ç–µ–ª—å/–ú–æ—Ç–µ–ª—å", "query": f'node["tourism"~"hotel|motel"](around:20000,{lat},{lon});'},
            {"label": "üõí –ú–∞–≥–∞–∑–∏–Ω", "query": f'node["shop"="supermarket"](around:10000,{lat},{lon});'},
            {"label": "üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è", "query": f'node["shop"="laundry"](around:10000,{lat},{lon});'},
            {"label": "üöø –î—É—à–µ–≤—ã–µ", "query": f'node["amenity"="shower"](around:20000,{lat},{lon});'},
        ]
        found_results_grouped = {}
        overpass_url = "http://overpass-api.de/api/interpreter"
        user_location = (lat, lon)

        for query_info in place_queries:
            label = query_info["label"]
            overpass_query = f"[out:json];{query_info['query']}out body;"

            try:
                logger.info(f"Overpass API –∑–∞–ø—Ä–æ—Å –¥–ª—è {label}: {overpass_query}")
                res = requests.post(overpass_url, data={"data": overpass_query}, timeout=REQUEST_TIMEOUT)
                res.raise_for_status()
                data = res.json()
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Overpass API –¥–ª—è {label}: {data.get('elements', [])}")

                if data.get("elements"):
                    if label not in found_results_grouped:
                        found_results_grouped[label] = []
                    for element in data["elements"][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–µ—Å—Ç
                        name = element["tags"].get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        address_parts = []
                        for tag in ["addr:street", "addr:housenumber", "addr:city", "addr:country"]:
                            if tag in element["tags"]:
                                address_parts.append(element["tags"][tag])
                        address = ", ".join(address_parts) if address_parts else "–ë–µ–∑ –∞–¥—Ä–µ—Å–∞"
                        el_lat, el_lon = element["lat"], element["lon"]
                        place_location = (el_lat, el_lon)
                        distance_km = geodesic(user_location, place_location).kilometers

                        if distance_km <= MAX_DISTANCE_KM:
                            maps_url = f"https://www.google.com/maps/dir/?api=1&origin={lat},{lon}&destination={el_lat},{el_lon}&travelmode=driving"
                            if (name, address) not in [(item[0], item[1]) for item in found_results_grouped[label]]:
                                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ: {name}, {distance_km:.2f} –∫–º –¥–ª—è {label}")
                                found_results_grouped[label].append((name, address, maps_url, distance_km))
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ Overpass API –¥–ª—è {label}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Overpass API –¥–ª—è {label}: {e}")

        messages, button_groups = format_places_reply(found_results_grouped, "OpenStreetMap")
        if not button_groups:
            await query.message.reply_markdown(messages[0])
        else:
            for msg, buttons in zip(messages, button_groups):
                await query.message.reply_markdown(msg, reply_markup=InlineKeyboardMarkup(buttons))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Overpass API: {e}", exc_info=True)
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ OpenStreetMap.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    try:
        if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, GOOGLE_MAPS_API_KEY]):
            logger.critical("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            raise ValueError("Missing environment variables")
        
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.VOICE, handle_voice))
        app.add_handler(MessageHandler(filters.LOCATION, handle_location))
        app.add_handler(CallbackQueryHandler(handle_callback_query))
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise
