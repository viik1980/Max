import logging
import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

from overpass_utils import find_nearby_places  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª overpass_utils.py –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º

# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å
context_history = []
MAX_TURNS = 6

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –õ–æ–≥
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü—Ä–æ–º—Ç
try:
    with open("prompt.txt", "r", encoding="utf-8") as f:
        SYSTEM_PROMPT = f.read()
except FileNotFoundError:
    SYSTEM_PROMPT = "–¢—ã ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –ø–æ–º–æ—â–Ω–∏–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∂–∏–∑–Ω–∏ –≤ —Ä–µ–π—Å–µ."

# GPT-–æ—Ç–≤–µ—Ç
async def ask_gpt(messages):
    try:
        return openai.ChatCompletion.acreate(model="gpt-4.5-preview", messages=messages)
    except Exception:
        return openai.ChatCompletion.acreate(model="gpt-3.5-turbo-1106", messages=messages)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥–æ—Ä–æ–≤–∞, —è ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –¥—Ä—É–≥ –∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫. –ü–∏—à–∏ –∏–ª–∏ –≥–æ–≤–æ—Ä–∏ ‚Äî –ø–æ–º–æ–≥—É!\n\n"
        "–ù–∞–ø–∏—à–∏ `–Ω–∞–π–¥–∏ –¥—É—à` –∏–ª–∏ `–Ω–∞–π–¥–∏ –º–∞–≥–∞–∑–∏–Ω` (–Ω—É–∂–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è).",
        parse_mode="Markdown"
    )

# –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É (—Ä—É—Å—Å–∫–∏–π)
async def handle_find_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    if not text.startswith("–Ω–∞–π–¥–∏"):
        return

    query = text.replace("–Ω–∞–π–¥–∏", "").strip()
    tag_map = {
        "–¥—É—à": ("amenity", "shower", "üöø –î—É—à"),
        "–º–∞–≥–∞–∑–∏–Ω": ("shop", "supermarket", "üõí –ú–∞–≥–∞–∑–∏–Ω"),
        "–∞–ø—Ç–µ–∫–∞": ("amenity", "pharmacy", "üíä –ê–ø—Ç–µ–∫–∞"),
        "–ø–∞—Ä–∫–æ–≤–∫–∞": ("amenity", "parking", "üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞"),
    }

    for key in tag_map:
        if key in query:
            tag_type, tag_value, label = tag_map[key]
            context.user_data["search_tag"] = (tag_type, tag_value, label)
            await update.message.reply_text("üìç –ü—Ä–∏—à–ª–∏ –º–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî –∏ —è –Ω–∞–π–¥—É " + label)
            return

    await update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —ç—Ç–æ –∏—Å–∫–∞—Ç—å. –ü—Ä–∏–º–µ—Ä—ã: `–Ω–∞–π–¥–∏ –¥—É—à`, `–Ω–∞–π–¥–∏ –º–∞–≥–∞–∑–∏–Ω`.")

# –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "search_tag" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: `–Ω–∞–π–¥–∏ –¥—É—à`")
        return

    lat = update.message.location.latitude
    lon = update.message.location.longitude
    tag_type, tag_value, label = context.user_data["search_tag"]
    results = find_nearby_places(lat, lon, tag_type, tag_value)

    if not results:
        await update.message.reply_text(f"‚ùå –ù–µ –Ω–∞—à—ë–ª {label} –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
        return

    text = f"üîç –ù–∞–π–¥–µ–Ω–æ {label} –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:\n\n"
    for i, place in enumerate(results[:5], 1):
        name = place.get("tags", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        dist = round(place["dist"], 1)
        text += f"{i}. {label} *{name}* ‚Äî ~{dist} –º\n"

    await update.message.reply_text(text, parse_mode="Markdown")

# –û–±—â–µ–Ω–∏–µ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()

    if user_input.lower().startswith("–Ω–∞–π–¥–∏"):
        await handle_find_query(update, context)
        return

    context_history.append({"role": "user", "content": user_input})
    messages = [{"role": "system", "content": SYSTEM_PROMPT}] + context_history[-MAX_TURNS:]
    response = await ask_gpt(messages)

    if response:
        assistant_reply = response.choices[0].message.content.strip()
        context_history.append({"role": "assistant", "content": assistant_reply})
        await update.message.reply_text(assistant_reply)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT.")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
