import logging
import os
import openai
import tempfile
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv
from overpass_utils import query_overpass, parse_places
import requests
import asyncio
from urllib.parse import quote as urllib_quote
from geopy.distance import geodesic

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
user_contexts = {}  # {user_id: [{"role": "user", "content": "..."}, ...]}
MAX_TURNS = 2
MAX_DISTANCE_KM = 50        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ –∫–º)
REQUEST_TIMEOUT = 15        # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# --- –ó–∞–≥—Ä—É–∑–∫–∞ .env ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")
openai.api_key = OPENAI_API_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–∞ ---
try:
    with open("prompt.txt", "r", encoding="utf-8") as f:
        SYSTEM_PROMPT = f.read()
except FileNotFoundError:
    SYSTEM_PROMPT = "–¢—ã ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –ø–æ–º–æ—â–Ω–∏–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∂–∏–∑–Ω–∏ –≤ —Ä–µ–π—Å–µ. –ò—Å–ø–æ–ª—å–∑—É–π –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞."

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ---
def load_relevant_knowledge(user_input: str) -> str:
    keywords_map = {
        "–æ—Ç–¥—ã—Ö": "Rezim_RTO.md",
        "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å": "Rezim_RTO.md",
        "—Å–º–µ–Ω–∞": "Rezim_RTO.md",
        "–ø–∞—É–∑–∞": "Rezim_RTO.md",
        "—Ä–∞–∑—Ä—ã–≤ –ø–∞—É–∑—ã": "Rezim_RTO.md",
        "—Ç–∞—Ö–æ–≥—Ä–∞—Ñ": "4_tahograf_i_karty.md",
        "–∫–∞—Ä—Ç–∞": "4_tahograf_i_karty.md",
        "–ø–æ–µ–∑–¥": "ferry_routes.md",
        "–ø–∞—Ä–æ–º": "ferry_routes.md",
        "—Ü–º—Ä": "CMR.md",
        "–¥–æ–∫—É–º–µ–Ω—Ç": "CMR.md",
        "–∫–æ–º—Ñ–æ—Ä—Ç": "11_komfort_i_byt.md",
        "–ø–∏—Ç–∞–Ω–∏–µ": "12_pitanie_i_energiya.md"
    }
    selected_files = set()
    lowered = user_input.lower()
    logging.info(f"–í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {lowered}")
    
    # –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword, filename in keywords_map.items():
        if keyword in lowered:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword} -> {filename}")
            selected_files.add(filename)
    
    # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if not selected_files:
        for keyword, filename in keywords_map.items():
            for word in lowered.split():
                if keyword in word:
                    logging.info(f"–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {keyword} –≤ {word} -> {filename}")
                    selected_files.add(filename)
    
    texts = []
    knowledge_dir = os.path.join(os.path.dirname(__file__), "knowledge")
    for filename in sorted(selected_files):
        path = os.path.join(knowledge_dir, filename)
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {path}")
        if os.path.exists(path):
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read().strip()
                    if content:
                        texts.append(f"üìò {filename}:\n{content}\n")
                        logging.info(f"[–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
                    else:
                        logging.warning(f"[–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π] –§–∞–π–ª –ø—É—Å—Ç: {filename}")
            except UnicodeDecodeError as e:
                logging.error(f"[–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ {filename}: {e}")
            except Exception as e:
                logging.error(f"[–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        else:
            logging.warning(f"[–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    
    knowledge_text = "\n".join(texts) or "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    logging.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{knowledge_text}")
    return knowledge_text

# --- GPT-–∑–∞–ø—Ä–æ—Å ---
async def ask_gpt(messages):
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT: {messages}")
    try:
        response = openai.ChatCompletion.create(model="gpt-4o", messages=messages)
        return response
    except Exception as e:
        logging.warning(f"gpt-4o –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback: {e}")
        try:
            return openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=messages)
        except Exception as e2:
            logging.error(f"GPT-3.5 —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
            return None

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥–æ—Ä–æ–≤–∞, —è ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –¥—Ä—É–≥ –∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫. –ü–∏—à–∏, –≥–æ–≤–æ—Ä–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if not user_input:
        await update.message.reply_text("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        return

    user_id = update.effective_user.id
    if user_id not in user_contexts:
        user_contexts[user_id] = []

    user_contexts[user_id].append({"role": "user", "content": user_input})
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    kb_snippet = load_relevant_knowledge(user_input)
    messages.append({"role": "system", "content": f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{kb_snippet}"})
    messages += user_contexts[user_id][-MAX_TURNS:]
    response = await ask_gpt(messages)
    if response:
        assistant_reply = response.choices[0].message.content.strip()
        user_contexts[user_id].append({"role": "assistant", "content": assistant_reply})
        await update.message.reply_text(assistant_reply)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await update.message.voice.get_file()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as f:
            await file.download_to_drive(f.name)
            audio_path = f.name

        with open(audio_path, "rb") as audio_file:
            transcript = openai.Audio.transcribe("whisper-1", audio_file)
            user_text = transcript.get("text", "")

        if not user_text:
            await update.message.reply_text("üéß –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {user_text}")

        user_id = update.effective_user.id
        if user_id not in user_contexts:
            user_contexts[user_id] = []

        user_contexts[user_id].append({"role": "user", "content": user_text})
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        kb_snippet = load_relevant_knowledge(user_text)
        messages.append({"role": "system", "content": f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{kb_snippet}"})
        messages += user_contexts[user_id][-MAX_TURNS:]
        response = await ask_gpt(messages)
        if response:
            assistant_reply = response.choices[0].message.content.strip()
            user_contexts[user_id].append({"role": "assistant", "content": assistant_reply})
            await update.message.reply_text(assistant_reply)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"[ERROR] –ì–æ–ª–æ—Å–æ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º.")
    finally:
        if 'audio_path' in locals():
            os.unlink(audio_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ---
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        context.user_data['last_location'] = (lat, lon)
        await update.message.reply_text(
            "üìç –ü–æ–ª—É—á–∏–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("Google Maps", callback_data=f"search_google|{lat}|{lon}")],
                [InlineKeyboardButton("OpenStreetMap", callback_data=f"search_overpass|{lat}|{lon}")]
            ])
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ ---
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        action, lat_str, lon_str = query.data.split("|")
        lat, lon = float(lat_str), float(lon_str)
        source_name = "Google Maps" if action == 'search_google' else "OpenStreetMap"
        await query.edit_message_text(text=f"–ò—â—É —á–µ—Ä–µ–∑ {source_name}...")
        if action == "search_google":
            await search_with_google(query, context, lat, lon)
        elif action == "search_overpass":
            await search_with_overpass(query, context, lat, lon)
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data: {query.data}, {e}")
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google API ---
async def search_with_google(query, context: ContextTypes.DEFAULT_TYPE, lat: float, lon: float):
    try:
        place_queries = [
            {"label": "üå≥ –ü–∞—Ä–∫–∏", "type": "park", "keyword": "park", "radius": 20000},
            {"label": "üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "type": "tourist_attraction", "keyword": "tourist attraction|museum|landmark", "radius": 20000},
            {"label": "üöõ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Ñ—É—Ä", "keyword": "–≥—Ä—É–∑–æ–≤–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞|truck parking", "radius": 10000},
            {"label": "üè® –û—Ç–µ–ª—å/–ú–æ—Ç–µ–ª—å", "type": "lodging", "keyword": "–º–æ—Ç–µ–ª—å|–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞|hotel|motel", "radius": 10000},
            {"label": "üõí –ú–∞–≥–∞–∑–∏–Ω", "type": "supermarket", "radius": 5000},
            {"label": "üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è", "keyword": "–ø—Ä–∞—á–µ—á–Ω–∞—è —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è|self-service laundry", "radius": 5000},
            {"label": "üöø –î—É—à–µ–≤—ã–µ", "keyword": "–¥—É—à|—Å–∞—É–Ω–∞|truck stop showers", "radius": 10000},
        ]
        found_results_grouped = {}
        base_url = "https://maps.googleapis.com/maps/api/place/"
        user_location = (lat, lon)
        for query_info in place_queries:
            label = query_info["label"]
            place_type = query_info.get("type")
            keyword = query_info.get("keyword")
            radius = query_info.get("radius", 10000)
            next_page_token = None
            urls = []
            if place_type:
                urls.append(
                    f"{base_url}nearbysearch/json"
                    f"?location={lat},{lon}&type={place_type}&rankby=distance&key={GOOGLE_MAPS_API_KEY}"
                )
            if keyword:
                query_str = urllib_quote(keyword)
                urls.append(
                    f"{base_url}textsearch/json"
                    f"?query={query_str}&location={lat},{lon}&radius={radius}&key={GOOGLE_MAPS_API_KEY}&language=ru"
                )
            for url in urls:
                while True:
                    try:
                        if next_page_token:
                            paginated_url = f"{url}&pagetoken={next_page_token}"
                            logging.info(f"Google API –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è {label}: {paginated_url}")
                            res = requests.get(paginated_url, timeout=REQUEST_TIMEOUT)
                        else:
                            logging.info(f"Google API –∑–∞–ø—Ä–æ—Å –¥–ª—è {label}: {url}")
                            res = requests.get(url, timeout=REQUEST_TIMEOUT)
                        res.raise_for_status()
                        data = res.json()
                        logging.info(f"–°—Ç–∞—Ç—É—Å Google API –¥–ª—è {label}: {data.get('status')}")
                        if data.get("status") != "OK":
                            logging.warning(f"Google API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {data.get('status')} –¥–ª—è {label}: {data.get('error_message', '')}")
                            break
                        if data.get("results"):
                            if label not in found_results_grouped:
                                found_results_grouped[label] = []
                            for place in data["results"][:15]:
                                name = place.get("name")
                                address = place.get("vicinity", "–ë–µ–∑ –∞–¥—Ä–µ—Å–∞")
                                loc = place["geometry"]["location"]
                                place_location = (loc["lat"], loc["lng"])
                                distance_km = geodesic(user_location, place_location).kilometers
                                if distance_km <= MAX_DISTANCE_KM:
                                    maps_url = f"https://www.google.com/maps/dir/?api=1&origin={lat},{lon}&destination={loc['lat']},{loc['lng']}&travelmode=driving"
                                    if (name, address) not in [(item[0], item[1]) for item in found_results_grouped[label]]:
                                        found_results_grouped[label].append((name, address, maps_url, distance_km))
                            next_page_token = data.get("next_page_token")
                            if not next_page_token:
                                break
                            await asyncio.sleep(2)
                    except requests.exceptions.RequestException as e:
                        logging.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ Google API –¥–ª—è {label}: {e}")
                        break
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Google API –¥–ª—è {label}: {e}")
                        break

        messages, buttons = format_places_reply(found_results_grouped, "Google Maps")
        for msg in messages:
            await query.message.reply_markdown(msg, reply_markup=buttons if msg == messages[-1] else None)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Google API: {e}", exc_info=True)
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Google Maps.")

# --- –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Overpass API ---
async def search_with_overpass(query, context: ContextTypes.DEFAULT_TYPE, lat: float, lon: float):
    try:
        place_queries = [
            {"label": "üå≥ –ü–∞—Ä–∫–∏", "query": f'node["leisure"="park"](around:10000,{lat},{lon});'},
            {"label": "üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "query": f'node["tourism"~"attraction|museum|monument"](around:10000,{lat},{lon});'},
            {"label": "üöõ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Ñ—É—Ä", "query": f'node["highway"="services"]["access"="truck"](around:10000,{lat},{lon});'},
            {"label": "üè® –û—Ç–µ–ª—å/–ú–æ—Ç–µ–ª—å", "query": f'node["tourism"~"hotel|motel"](around:10000,{lat},{lon});'},
            {"label": "üõí –ú–∞–≥–∞–∑–∏–Ω", "query": f'node["shop"="supermarket"](around:5000,{lat},{lon});'},
            {"label": "üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è", "query": f'node["shop"="laundry"](around:5000,{lat},{lon});'},
            {"label": "üöø –î—É—à–µ–≤—ã–µ", "query": f'node["amenity"="shower"](around:10000,{lat},{lon});'},
        ]
        found_results_grouped = {}
        overpass_url = "http://overpass-api.de/api/interpreter"
        user_location = (lat, lon)
        for query_info in place_queries:
            label = query_info["label"]
            overpass_query = f"[out:json];{query_info['query']}out body;"
            try:
                logging.info(f"Overpass API –∑–∞–ø—Ä–æ—Å –¥–ª—è {label}: {overpass_query}")
                res = requests.post(overpass_url, data={"data": overpass_query}, timeout=REQUEST_TIMEOUT)
                res.raise_for_status()
                data = res.json()
                logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Overpass API –¥–ª—è {label}: {data.get('elements', [])}")
                if data.get("elements"):
                    if label not in found_results_grouped:
                        found_results_grouped[label] = []
                    for element in data["elements"][:10]:
                        name = element["tags"].get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        address_parts = []
                        for tag in ["addr:street", "addr:housenumber", "addr:city", "addr:country"]:
                            if tag in element["tags"]:
                                address_parts.append(element["tags"][tag])
                        address = ", ".join(address_parts) if address_parts else "–ë–µ–∑ –∞–¥—Ä–µ—Å–∞"
                        el_lat, el_lon = element["lat"], element["lon"]
                        place_location = (el_lat, el_lon)
                        distance_km = geodesic(user_location, place_location).kilometers
                        if distance_km <= MAX_DISTANCE_KM:
                            maps_url = f"https://www.google.com/maps/dir/?api=1&origin={lat},{lon}&destination={el_lat},{el_lon}&travelmode=driving"
                            if (name, address) not in [(item[0], item[1]) for item in found_results_grouped[label]]:
                                found_results_grouped[label].append((name, address, maps_url, distance_km))
            except requests.exceptions.RequestException as e:
                logging.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ Overpass API –¥–ª—è {label}: {e}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Overpass API –¥–ª—è {label}: {e}")
        messages, buttons = format_places_reply(found_results_grouped, "OpenStreetMap")
        for msg in messages:
            await query.message.reply_markdown(msg, reply_markup=buttons if msg == messages[-1] else None)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Overpass API: {e}", exc_info=True)
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ OpenStreetMap.")

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ ---
def format_places_reply(results, source):
    messages = []
    buttons = []
    if not results:
        return ["‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."], None
    for label, places in results.items():
        if places:
            msg = f"*{label}* ({source}):\n"
            for name, address, url, dist_km in places[:5]:
                msg += f"- [{name}]({url}), {address} | üöó {dist_km:.1f} –∫–º\n"
            messages.append(msg)
    buttons.append([InlineKeyboardButton("–í—Å–µ –º–µ—Å—Ç–∞", callback_data="all_places")])
    return messages, InlineKeyboardMarkup(buttons)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, GOOGLE_MAPS_API_KEY]):
        logging.critical("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    else:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.VOICE, handle_voice))
        app.add_handler(MessageHandler(filters.LOCATION, handle_location))
        app.add_handler(CallbackQueryHandler(handle_callback_query))
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        asyncio.run(app.run_polling())
