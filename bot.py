import logging
import os
import openai
import tempfile
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
context_history = []
MAX_TURNS = 6

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
Maps_API_KEY = os.getenv("Maps_API_KEY")
openai.api_key = OPENAI_API_KEY

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è GPT
try:
    with open("prompt.txt", "r", encoding="utf-8") as f:
        SYSTEM_PROMPT = f.read()
except FileNotFoundError:
    SYSTEM_PROMPT = "–¢—ã ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –ø–æ–º–æ—â–Ω–∏–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∂–∏–∑–Ω–∏ –≤ —Ä–µ–π—Å–µ."
    logger.warning("–§–∞–π–ª prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π ---
def load_relevant_knowledge(user_input: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keywords_map = {
        "–æ—Ç–¥—ã—Ö": "Rezim_RTO.md",
        "–ø–∞—É–∑": "Rezim_RTO.md",
        "—Å–º–µ–Ω": "Rezim_RTO.md",
        "—Ç–∞—Ö–æ–≥—Ä–∞—Ñ": "4_tahograf_i_karty.md",
        "–∫–∞—Ä—Ç–∞": "4_tahograf_i_karty.md",
        "–ø–æ–µ–∑–¥": "ferry_routes.md",
        "–ø–∞—Ä–æ–º": "ferry_routes.md",
        "—Ü–º—Ä": "CMR.md",
        "–¥–æ–∫—É–º–µ–Ω—Ç": "CMR.md",
        "–∫–æ–º—Ñ–æ—Ä—Ç": "11_komfort_i_byt.md",
        "–ø–∏—Ç–∞–Ω–∏–µ": "12_pitanie_i_energiya.md"
    }

    selected_files = set()
    lowered = user_input.lower()
    for keyword, filename in keywords_map.items():
        if keyword in lowered:
            selected_files.add(filename)

    texts = []
    for filename in sorted(selected_files):
        path = os.path.join("knowledge", filename)
        if os.path.exists(path):
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read().strip()
                    if content:
                        texts.append(f"üìò {filename}:\n{content}\n")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π {filename}: {e}")
        else:
            logger.warning(f"–§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

    return "\n".join(texts) or ""

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å GPT ---
async def ask_gpt(messages: list) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ GPT-–º–æ–¥–µ–ª–∏, –ø—ã—Ç–∞—è—Å—å —Å–Ω–∞—á–∞–ª–∞ GPT-4.5, –∑–∞—Ç–µ–º GPT-3.5.
    """
    try:
        response = await openai.ChatCompletion.acreate(model="gpt-4.5-preview", messages=messages)
        return response
    except openai.error.OpenAIError as e:
        logger.warning(f"GPT-4.5-preview –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –∫ GPT-3.5: {e}")
        try:
            response = await openai.ChatCompletion.acreate(model="gpt-3.5-turbo-1106", messages=messages)
            return response
        except openai.error.OpenAIError as e2:
            logger.error(f"GPT-3.5 —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
            return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    await update.message.reply_text("–ó–¥–æ—Ä–æ–≤–∞, —è ‚Äî –ú–∞–∫—Å. –î–∏—Å–ø–µ—Ç—á–µ—Ä, –¥—Ä—É–≥ –∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫. –ü–∏—à–∏, –≥–æ–≤–æ—Ä–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_input = update.message.text.strip()
    if not user_input:
        await update.message.reply_text("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        return

    lowered = user_input.lower()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if any(keyword in lowered for keyword in ["–Ω–∞—Ä–∏—Å—É–π", "–ø–æ–∫–∞–∂–∏", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∫–∞—Ä—Ç–∏–Ω–∞"]):
        try:
            image_response = await openai.Image.acreate(prompt=user_input, n=1, size="512x512")
            image_url = image_response['data'][0]['url']
            await update.message.reply_photo(photo=image_url, caption="üñºÔ∏è –í–æ—Ç –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å:")
            return
        except openai.error.OpenAIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI API: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT
    context_history.append({"role": "user", "content": user_input})
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    
    kb_snippet = load_relevant_knowledge(user_input)
    if kb_snippet:
        messages.append({"role": "system", "content": "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n" + kb_snippet})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    messages.extend(context_history[-MAX_TURNS:])

    response = await ask_gpt(messages)
    if response and response.choices:
        assistant_reply = response.choices[0].message.content.strip()
        context_history.append({"role": "assistant", "content": assistant_reply})
        await update.message.reply_text(assistant_reply)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        file = await update.message.voice.get_file()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º NamedTemporaryFile –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as f:
            await file.download_to_drive(f.name)
            audio_path = f.name

        with open(audio_path, "rb") as audio_file:
            transcript = await openai.Audio.atranscribe("whisper-1", audio_file)
            user_text = transcript.get("text", "")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(audio_path)

        if not user_text:
            await update.message.reply_text("üéß –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: \"{user_text}\"") # –î–æ–±–∞–≤–∏–ª –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏

        context_history.append({"role": "user", "content": user_text})
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        kb_snippet = load_relevant_knowledge(user_text)
        if kb_snippet:
            messages.append({"role": "system", "content": "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n" + kb_snippet})
        messages.extend(context_history[-MAX_TURNS:])

        response = await ask_gpt(messages)
        if response and response.choices:
            assistant_reply = response.choices[0].message.content.strip()
            context_history.append({"role": "assistant", "content": assistant_reply})
            await update.message.reply_text(assistant_reply)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    except openai.error.OpenAIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ OpenAI API: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å API.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        if 'audio_path' in locals() and os.path.exists(audio_path):
            os.remove(audio_path)


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∏—â–µ—Ç –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏,
    –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Google Places API.
    """
    try:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        await update.message.reply_text("üìç –ü–æ–ª—É—á–∏–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ò—â—É –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –º–µ—Å—Ç –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏
        place_queries = [
            # –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ / –ü—Ä–æ–≥—É–ª–∫–∏
            {"label": "üå≥ –ü—Ä–æ–≥—É–ª–∫–∞/–î–æ—Å—Ç.", "type": "tourist_attraction", "keyword": "–ø–∞—Ä–∫|–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å|–æ—Ç–¥—ã—Ö", "radius": 15000},
            {"label": "üå≥ –ü—Ä–æ–≥—É–ª–∫–∞/–î–æ—Å—Ç.", "type": "park", "keyword": "", "radius": 15000},
            
            # –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è –≥—Ä—É–∑–æ–≤—ã—Ö
            {"label": "üöõ –ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Ñ—É—Ä", "type": "parking", "keyword": "–≥—Ä—É–∑–æ–≤–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞|truck parking|–ø–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Ñ—É—Ä", "radius": 50000},
            
            # –û—Ç–µ–ª—å / –ú–æ—Ç–µ–ª—å
            {"label": "üè® –û—Ç–µ–ª—å/–ú–æ—Ç–µ–ª—å", "type": "lodging", "keyword": "–º–æ—Ç–µ–ª—å|–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞|hotel|motel", "radius": 20000},
            
            # –ú–∞–≥–∞–∑–∏–Ω—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
            {"label": "üõí –ú–∞–≥–∞–∑–∏–Ω (–ø—Ä–æ–¥—É–∫—Ç—ã)", "type": "supermarket", "keyword": "", "radius": 10000},
            {"label": "üõí –ú–∞–≥–∞–∑–∏–Ω (–ø—Ä–æ–¥—É–∫—Ç—ã)", "type": "convenience_store", "keyword": "", "radius": 10000},
            
            # –°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω–∫–∏ (–ø—Ä–∞—á–µ—á–Ω—ã–µ)
            {"label": "üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è", "type": "laundry", "keyword": "–ø—Ä–∞—á–µ—á–Ω–∞—è|—Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ|laundromat", "radius": 10000},
            # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Ç–∏–ø –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å textsearch –±–µ–∑ —Ç–∏–ø–∞
            {"label": "üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è", "type": None, "keyword": "–ø—Ä–∞—á–µ—á–Ω–∞—è —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è|laundry service|self-service laundry", "radius": 10000},
            
            # –î—É—à–µ–≤—ã–µ (—Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é, –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞, –≥–¥–µ –æ–Ω–∏ —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç)
            {"label": "üöø –î—É—à–µ–≤—ã–µ", "type": "gas_station", "keyword": "truck stop|–¥—É—à–µ–≤—ã–µ|–¥—É—à –¥–ª—è –¥–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫–æ–≤", "radius": 50000},
            {"label": "üöø –î—É—à–µ–≤—ã–µ", "type": None, "keyword": "–¥—É—à|—Å–∞—É–Ω–∞|truck stop showers", "radius": 50000}
        ]

        found_results_grouped = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        
        for query_info in place_queries:
            label = query_info["label"]
            place_type = query_info.get("type")
            keyword = query_info.get("keyword")
            radius = query_info.get("radius", 7000) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –∫–º, –Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å

            base_url = "https://maps.googleapis.com/maps/api/place/"
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: nearbysearch –∏–ª–∏ textsearch
            url = ""
            if place_type and not keyword: # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–ø, –Ω–æ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                url = (
                    f"{base_url}nearbysearch/json"
                    f"?location={lat},{lon}&radius={radius}&type={place_type}&key={Maps_API_KEY}&language=ru"
                )
            elif keyword: # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ Text Search –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
                # –î–ª—è Text Search —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å query, –≤–∫–ª—é—á–∞—é—â–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                query_str = f"{keyword} —Ä—è–¥–æ–º —Å {lat},{lon}"
                url = (
                    f"{base_url}textsearch/json"
                    f"?query={query_str}&radius={radius}&key={Maps_API_KEY}&language=ru"
                )
            else:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–ø—Ä–æ—Å: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {label}")
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–∏–ø–∞, –Ω–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞

            try:
                logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –¥–ª—è {label}: {url}")
                res = requests.get(url)
                res.raise_for_status() # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 4xx/5xx
                data = res.json()

                if data.get("results"):
                    if label not in found_results_grouped:
                        found_results_grouped[label] = []

                    for place in data["results"][:3]: # –ë–µ—Ä–µ–º –¥–æ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        name = place.get("name")
                        address = place.get("vicinity", "–ë–µ–∑ –∞–¥—Ä–µ—Å–∞")
                        loc = place["geometry"]["location"]
                        place_id = place["place_id"]
                        
                        # URL –¥–ª—è Google Maps, –∏—Å–ø–æ–ª—å–∑—É–µ–º place_id –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                        maps_url = f"https://www.google.com/maps/search/?api=1&query={loc['lat']},{loc['lng']}&query_place_id={place_id}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if (name, address) not in [(item[0], item[1]) for item in found_results_grouped[label]]:
                            found_results_grouped[label].append((name, address, maps_url))
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {label}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {label}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
        if found_results_grouped:
            reply = "üìå –ù–∞—à—ë–ª —Ç–∞–∫–∏–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º:\n\n"
            buttons = []
            
            for label, places in found_results_grouped.items():
                reply += f"**{label}**:\n"
                for name, address, url in places:
                    reply += f"  ‚Ä¢ **{name}**\n    üìç {address}\n    üîó [–ú–∞—Ä—à—Ä—É—Ç]({url})\n"
                    buttons.append([InlineKeyboardButton(text=f"{label}: {name}", url=url)])
                reply += "\n" # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π

            await update.message.reply_markdown(reply, reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await update.message.reply_text("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()
