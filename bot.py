import logging
import os
import openai
import tempfile
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ê ===

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# Telegram —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.getenv("max")
if not TELEGRAM_TOKEN:
    logging.error("TELEGRAM_TOKEN (max) not found in environment variables! Check Railway settings.")
    raise ValueError("TELEGRAM_TOKEN is required.")
logging.info(f"TELEGRAM_TOKEN loaded: {TELEGRAM_TOKEN[:5]}...")

# OpenAI –∫–ª—é—á
OPENAI_API_KEY = os.getenv("ai")
if not OPENAI_API_KEY:
    logging.error("OPENAI_API_KEY (ai) not found in environment variables! Check Railway settings.")
    raise ValueError("OPENAI_API_KEY is required.")
openai.api_key = OPENAI_API_KEY
logging.info(f"OPENAI_API_KEY loaded: {OPENAI_API_KEY[:5]}...")  # –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞–∫—Å. –ì–æ–≤–æ—Ä–∏, —á–µ–º –ø–æ–º–æ—á—å? (–í—Ä–µ–º—è: 22:14 CEST, 29 –º–∞—è 2025)")

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input}")

    try:
        logging.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...")
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ú–∞–∫—Å. –û–ø—ã—Ç–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –¥—É—à–æ–π. –û—Ç–≤–µ—á–∞–π –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": user_input}
            ]
        )
        logging.info("üì• –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω")
        reply = response.choices[0].message.content if response.choices else "‚ö†Ô∏è GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞."
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç GPT: {e}")
        reply = "‚ö†Ô∏è –ú–∞–∫—Å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å. GPT –º–æ–ª—á–∏—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ."
    await update.message.reply_text(reply)

# –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await update.message.voice.get_file()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as f:
            await file.download_to_drive(f.name)
            audio_path = f.name

        with open(audio_path, "rb") as audio_file:
            transcript = openai.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
            )
            user_text = transcript.text if transcript and "text" in transcript else ""

        if not user_text:
            await update.message.reply_text("üó£Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å. –°–∫–∞–∂–∏ –µ—â—ë —Ä–∞–∑?")
            os.unlink(audio_path)
            return

        await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {user_text}")

        logging.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤ OpenAI...")
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ú–∞–∫—Å. –û–ø—ã—Ç–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –∑–∞–±–æ—Ç–æ–π –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö."},
                {"role": "user", "content": user_text},
            ]
        )
        logging.info("üì• –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω")
        reply = response.choices[0].message.content if response.choices else "‚ö†Ô∏è GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞."
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        reply = "‚ö†Ô∏è –ú–∞–∫—Å –Ω–µ —Å–º–æ–≥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
    finally:
        if 'audio_path' in locals():
            os.unlink(audio_path)
    await update.message.reply_text(reply)

# === –ó–ê–ü–£–°–ö ===

if __name__ == '__main__':
    try:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.VOICE, handle_voice))
        logging.info("üöÄ –ë–æ—Ç –ú–∞–∫—Å –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram...")
        app.run_polling(allowed_updates=[])
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
